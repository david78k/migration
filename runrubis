#!/bin/bash

target=c11node10
#target=10.5.147.210
#postcopy=on
postcopy=off
#masterpost=on
masterpost=off

ram=1024
vcpu=1

# boot up vm 
preptime=90

# sleep interval
sleeptime=5
#ports=( 4446 4447 4448 4449 )
ports=( 4450 4451 4452 4453 )
#nports=${#ports[@]}
#nports=1
nports=4
remain=$nports
#migspeed=30
migspeed=125

# for cpu utilization
PREV_TOTAL=0
PREV_IDLE=0

function startcluster() {
	# generate a random mac address for the qemu nic
	#mac=`printf 'DE:AD:BE:EF:%02X:%02X\n' $((RANDOM%256)) $((RANDOM%256))`

	# filename ram vcpu telnetport vncport listenport mac_address
	# tomcat 10.244.38.13
	mac=DE:AD:BE:EF:30:80
	./runvm-daemon "rubis/tomcat.qcow2" $ram $vcpu ${ports[0]} 5 $mac

	# slave1 10.244.37.1
	mac=DE:AD:BE:EF:FA:3A
#	./runvm-daemon slave1.qcow2 $ram $vcpu 4447 2 $mac

	# slave2 10.244.38.71
	mac=DE:AD:BE:EF:FF:57
#	./runvm-daemon slave2.qcow2 $ram $vcpu 4448 3 $mac

	# slave3 10.244.38.70
	mac=DE:AD:BE:EF:A6:75
	#mac=DE:AD:BE:EF:92:C8
	#./runvm-daemon slave3.qcow2 $ram $vcpu 4449 4 $mac
}

function migrate() {
	# filename ram vcpu telnetport vncport listenport postcopy migration_speed
	./ncmigrate tomcat.qcow2 $ram $vcpu ${ports[0]} 5 5446 $masterpost $migspeed
	./ncmigrate slave1.qcow2 $ram $vcpu 4447 2 5447 $postcopy $migspeed
	./ncmigrate slave2.qcow2 $ram $vcpu 4448 3 5448 $postcopy $migspeed
	./ncmigrate slave3.qcow2 $ram $vcpu 4449 4 5449 $postcopy $migspeed
}

function check() {
	#while [ $remain -gt 0 ]; 
	while [ 1 ]; 
	do
		#remain=${#ports[@]}
		remain=$nports
		for port in ${ports[@]}; 
		do
			info=`./checkstatus localhost $port`
			if [[ -z $info ]]; then
				(( remain -- ))
				continue
			fi

			status=`echo "$info" | grep -a complete | awk '{print $3}'`
			#echo $status

			if [[ $status == *completed* ]]; then
				echo $port
				echo "$info"
				./stopvm localhost $port
				#./stopvm $target $port
				(( remain -- ))
				continue
			fi

		#	./checkstatus $target $port
		done

		echo remaining: $remain
		if [ $remain -le 0 ]; then
			break
		fi
		sleep $sleeptime
	done
}

function finish() {
	for port in ${ports[@]}; 
	do
		echo $port

		./stopvm localhost $port
#		./stopvm $target $port
	done
}

# average cpu usage since the last measurement
function cpusage() {
  CPU=(`grep '^cpu ' /proc/stat`) # Get the total CPU statistics.
  unset CPU[0]                          # Discard the "cpu" prefix.
  IDLE=${CPU[4]}                        # Get the idle CPU time.
  # Calculate the total CPU time.
  TOTAL=0
  for VALUE in "${CPU[@]}"; do
    let "TOTAL=$TOTAL+$VALUE"
  done

  # Calculate the CPU usage since we last checked.
  let "DIFF_IDLE=${IDLE}-${PREV_IDLE}"
  let "DIFF_TOTAL=${TOTAL}-${PREV_TOTAL}"
  let "DIFF_USAGE=(1000*(${DIFF_TOTAL}-${DIFF_IDLE})/${DIFF_TOTAL}+5)/10"
  #echo -e "$DIFF_USAGE"
  echo -e "CPU: $DIFF_USAGE %"
  #echo -e "\rCPU: $DIFF_USAGE %  \b\b"

  # Remember the total and idle CPU times for the next check.
  PREV_TOTAL="$TOTAL"
  PREV_IDLE="$IDLE"
}

function migratecluster() {
	dstatfile=src.dstat
	dstatdest=dest.dstat
        dstat -cmdngy -N eth0 --noheaders > $dstatfile &
        ssh $target "dstat -cmdngy -N eth0 --noheaders" > $dstatdest &

#	sleep $preptime
	migrate 
	check

        # stop dstat
        pgrep -fl dstat| awk '{print $1}' | xargs kill -9
        ssh $target "pgrep -fl dstat| awk '{print $1}' | xargs kill -9"

        # plot host cpu/net usage
	# fix to add both send/receive
        plotcpu="./plotcpu"
        plotnet="./plotnet"
        $plotcpu $dstatfile
        $plotnet $dstatfile
        $plotcpu $dstatdest
        $plotnet $dstatdest
}

#cpusage

startcluster
#migratecluster
#migratecluster > migrate.log
#finish

#cpusage
