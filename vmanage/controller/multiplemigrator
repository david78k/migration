#
NUM_PMs=8
NUM_VMs=8
pwnd=1
vwnd=1
pmstart=1
pm=1
nextPM=1
nextVM=()
totalPMs=$NUM_PMs
cvms=0 # current oustanding VMs in migration
rvms=0 # number of remaining VMs
offset=0 # pm offset
vwndpipe=/tmp/vwndpipe
vwndfile=/tmp/vwnd
done=()

for (( i = 1; i <= totalPMs; i ++ )); do
	host=gra$i
	vms=`ssh $host "virsh list | grep running | wc -l"`
	rvms=$(( rvms + vms ))
	echo gra$i, vms=$vms, rvms = $rvms
	nextVM[$i]=1
	#done[$i]=false
	done[$i]=0
	if (( $vms == 0 )); then
		done[$i]=1
		if (( pm == pmstart )); then 
			pmstart=$(( pmstart + 1 ))
		fi
	fi
done

#mkfifo $vwndpipe
#echo 1 > $vwndpipe
echo 5 > $vwndfile
read vwnd <$vwndfile
#vwnd=`read line <$vwndpipe`
#rvms=18
while (( $rvms > 0 ))
do
	pwnd=$vwnd
	if (( $vwnd > $NUM_PMs )); then
		pwnd=$NUM_PMs
	fi

	echo rvms = $rvms
	# wait (block) until not full
	while [ $vwnd -le $cvms ]
	do
		sleep 0.1 # wait
	#	vwnd=`cat $vwndfile`
		cvms=0
		for (( i = 0; i < $pwnd; i ++ )) 
		do
			host=gra$(( pmstart + i ))
			vms=`ssh $host ps -ef | grep migrate | wc -l`
			cvms=$(( cvms + vms ))
		done
		read vwnd <$vwndfile
		echo vwnd=$vwnd, cvms=$cvms
	done

	#rocks run host $host "virsh list | tail -1"
	pm=`expr $pmstart + \( $offset % $pwnd \)`
	echo -n "pm = $pm, "
	while (( done[$pm] )); do
		#pm=$(( pm + 1))
		pm=`expr \( 1 + $pm \) % $pwnd`
		#if (( pm == NUM_PMs )); then 
		#	pm=$pmstart
		#fi
		if (( pm == 0 )); then
			echo pm=0, pwnd=$pwnd
			pm=$pmstart
			offset=0
		#	pm=$(( pm + 1 ))
		fi
	done
#	echo pm = $pm

	host=gra$pm
	dest=grb$pm
	vm=gra$pm-${nextVM[$pm]}
	#rocks run host $host "virsh migrate --live $vm qemu+ssh://$dest/system --verbose" &
	echo migrate $vm from $host to $dest 
	echo pmstart = $pmstart, pm = $pm 

	rvms=$(( rvms - 1 ))
	offset=$(( offset + 1 ))

	if (( nextVM[$pm] == NUM_VMs )); then
		done[$pm]=1;
		echo $pm is done
		if (( pm == pmstart )); then
			#if (( pmstart != NUM_VMs )); then
				pmstart=$(( pmstart + 1 ))
			#fi
			offset=0
		fi
	#	if (( pm == NUM_PMs )); then
	#		pm=pmstart
	#	fi
		#pm=$(( pm + 1 ))
	fi
	#els
		nextVM[$pm]=$(( nextVM[$pm] + 1 ))
	#fi
#	sleep 1
done

wait

