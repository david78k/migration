#!/bin/bash

################################################################
#
#                  parameter configuration  
#
################################################################

#bench=memtouch
bench=kernelcompile
#ram=128
#ram=256
ram=1024
vcpu=1
# max link speed 118MB/s or 1000Mb/s
speed=125 # migrate speed in MB/s
downtime=0.03	# 30ms KVM default
mode=precopy

# capabilities
caps=( )
cache=64 # xbzrle cache size in MBytes

expno=1

# kernel compile
warmup=20 # time in seconds to make clean and warm up

# sysbench params
#prefix=1024_RO_${expno}

# memtouch params
#warmup=10
dirtyrate=100 # MB/s
#prefix=s${speed}_r${ram}_d${dirtyrate}_n${expno}

loghome=log

# for cpu utilization
PREV_TOTAL=0
PREV_IDLE=0

################################################################
#
#                       functions  
#
################################################################

function cpusage() {
  CPU=(`grep '^cpu ' /proc/stat`) # Get the total CPU statistics.
  unset CPU[0]                          # Discard the "cpu" prefix.
  IDLE=${CPU[4]}                        # Get the idle CPU time.
  # Calculate the total CPU time.
  TOTAL=0
  for VALUE in "${CPU[@]}"; do
    let "TOTAL=$TOTAL+$VALUE"
  done

  # Calculate the CPU usage since we last checked.
  let "DIFF_IDLE=$IDLE-$PREV_IDLE"
  let "DIFF_TOTAL=$TOTAL-$PREV_TOTAL"
  let "DIFF_USAGE=(1000*($DIFF_TOTAL-$DIFF_IDLE)/$DIFF_TOTAL+5)/10"
  echo -e "CPU: $DIFF_USAGE %"
  #echo -e "\rCPU: $DIFF_USAGE %  \b\b"

  # Remember the total and idle CPU times for the next check.
  PREV_TOTAL="$TOTAL"
  PREV_IDLE="$IDLE"
}

#######################################################################################

function ncmigrate() {

echo $caps
xbzrle=off
converge=off
if [[ "$caps" == *xbzrle* ]]; then
	xbzrle=on
fi

if [[ "$caps" == *converge* ]]; then
	converge=on
fi

# CAUTION: DO NOT use tab to indent. Doing so will give syntax errors.
nc localhost 4446 << EOF
info version
migrate_set_speed $speed
migrate_set_downtime $downtime
migrate_set_capability auto-converge $converge
migrate_set_capability xbzrle $xbzrle
migrate_set_cache_size $cache
info migrate_capabilities
migrate tcp:c11node10:4444
info migrate
info status
quit
EOF
echo
}

#######################################################################################

function migrate() {

prefix=$expno
if [ $bench == "memtouch" ]; then
	prefix=dirty${dirtyrate}_${expno}
fi

logdir=$loghome/${bench}/${mode}/downtime${downtime}/ram${ram}/vcpu${vcpu}/speed${speed}/${caps}
#logdir=$loghome/${bench}/${mode}/ram${ram}/vcpu${vcpu}/speed${speed}/${caps}
#logdir=$loghome/${bench}/${mode}/${cap}/ram${ram}/vcpu${vcpu}/speed${speed}/dirty${dirtyrate}

#if [[ $downtime != "0.03" ]]; then
#	logdir=$logdir/downtime${downtime}
#fi

#if [[ $caps == "xbzrle" ]]; then
if [[ $cache != "64" ]]; then
	logdir=$logdir/cache${cache}
fi

logfile=$logdir/${prefix}.log
dstatfile=$logdir/${prefix}.dstat
migfile=$logdir/${prefix}.mig # nc migration results

mkdir -p $logdir 

echo ram = $ram MB
echo migration speed = $speed MB/s
echo benchmark = $bench
#echo dirty rate = $dirtyrate MB/s
#echo $caps
echo

echo $logfile
echo

dest=c11node10
telnetport=4446
vmargs="$ram $vcpu"

echo "$dest (${ram}MB) listening ..."
ssh $dest /root/qemu/listen-daemon $vmargs
#ssh $dest /root/qemu/listen-postcopy-daemon $ram

./runvm-daemon $vmargs

echo waiting 20 seconds for VM bootup ...
sleep 20

echo starting dstat ...
#ssh localhost -p 5555 "dstat -cmdngy --noheaders > dstat/${prefix}.log" &
dstat -cmdngy --noheaders > $dstatfile &

# run benchmark (memtouch, sysbench, apache, netperf, lmbench, kc) in background
bencharg=
if [ $bench == "memtouch" -a $dirtyrate -ne 0 ]; then
	bencharg=$dirtyrate
	#ssh localhost -p 5555 "/root/run-memtouch $dirtyrate" &
fi

sshcmd="/root/run-${bench} $bencharg"

echo starting $bench $bencharg ...
#echo starting memtouch $dirtyrate ...
ssh localhost -p 5555 "$sshcmd" &

#echo starting sysbench ...
#ssh localhost -p 5555 "/root/run > sysbench/${prefix}.log" &

echo waiting $warmup seconds for initializing ...
sleep $warmup
echo

echo starting migration ...

cpusage

#./ncmigrate-postcopy > log/mt_${prefix}.log
ncmigrate > $migfile
#logsave $migfile ncmigrate

cpusage >> $migfile

egrep -a "total time:|downtime:|transferred|bytes|pages|mbps|cache size|cache miss|overflow|CPU" $migfile > $logfile
cat $logfile

echo waiting 10 seconds for finalizing ...
sleep 10

# shutdown VM at dest
./stopvm $dest $telnetport

# stop dstat
pgrep -fl dstat| awk '{print $1}' | xargs kill -9
}

################################################################
#
#                       iterations  
#
################################################################

expcaps=( default xbzrle auto-converge xbzrle+auto-converge )
#expcaps=( xbzrle auto-converge xbzrle+auto-converge )
#expcaps=( xbzrle xbzrle+auto-converge )
#expcaps=( default )
#expcaps=( xbzrle )
#expcaps=( xbzrle+auto-converge )
#expcaps=( auto-converge xbzrle+auto-converge )
#expcaps=( auto-converge )

vcpus=( 1 2 4 8 12 )
#vcpus=( 2 4 8 12 )
#vcpus=( 1 )

#rams=( 2G 4G 8G 12G 16G 20G )
#rams=( 2048 4096 8192 12288 16384 20480 )
#rams=( 2048 )
#rams=( 4096 )
#rams=( 8192 )
#rams=( 16384 )
#rams=( 12288 )
#rams=( 20480 )
rams=( 1024 )

# 200 400 600 800 1000 mbps
#speeds=( 100 75 50 )
#speeds=( 75 )
#speeds=( 100 )
speeds=( 125 )

# max downtime in seconds: default 0.03 (30ms)
#downtimes=( 0.1 0.5 1 5 10 30 60 120 )
#downtimes=( 0.03 )
downtimes=( 10 )

# xbzrle cache size in MBytes: default 64MB, max unlimited
# should be a power of 2: 256M/512M/1G/2G/4G/8G/16/32...
#caches=( 128 256 512 1024 2048 4096 8192 16384 )
caches=( 64 )
#caches=( 16384 )

#runs=( 1 2 3 4 5 6 7 8 9 10 )
runs=( 2 3 4 5 6 7 8 9 10 )
#runs=( 11 12 13 14 15 16 17 18 19 20 )
#runs=( 1 )

################# benchmark specific params ###################

# memtouch
#dirtyrates=( 10 20 30 40 50 60 70 80 90 100 110 120 )
#dirtyrates=( 0 )

# sysbench
# hadoop
# lmbench
# cloudstone

for run in ${runs[@]}
do
	expno=$run
for mem in ${rams[@]}
do
	ram=$mem
for sp in ${speeds[@]}
do
	speed=$sp
	for arg in ${vcpus[@]}
	do
		vcpu=$arg
	for dt in ${downtimes[@]}
	do
		downtime=$dt
	for expcap in ${expcaps[@]}
	do
#		if [ $expcap != "default" ]; then
			caps=$expcap
#		fi

		if [ $bench == "memtouch" ]; then
			for rate in ${dirtyrates[@]}
			do
				dirtyrate=$rate
				migrate	
			done
		elif [ $bench == "kernelcompile" ]; then
			for arg2 in ${caches[@]}
			do
				cache=$arg2
				echo migrate $expcap $vcpu $cache
				migrate	
			done
		fi
	done
	done
	done
done
done
done

