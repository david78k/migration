#!/bin/bash

################################################################
#
#                  parameter configuration  
#
################################################################

#bench=memtouch
bench=kernelcompile
#bench=kcbench
#bench=apachebench
#bench=svm
#bench=idle
#bench=hadoop

#ram=128
#ram=256
ram=1024
vcpu=1
# max link speed 118MB/s or 1000Mb/s
speed=125 # migrate speed in MB/s
downtime=0.03	# 30ms KVM default
mode=precopy

# capabilities
caps=( )
cache=64 # xbzrle cache size in MBytes

expno=1

#vm=10.244.34.229
vm=10.244.39.141

bootup=50 # time in seconds to boot up VM

# apachebench
client=10.5.147.206 # c11node6

# kernel compile
warmup=20 # time in seconds to make clean and warm up

# svm
#bootup=50 # time in seconds to boot up VM
#warmup=5 # time in seconds to make clean and warm up

# sysbench params
#prefix=1024_RO_${expno}

# memtouch params
#warmup=10
memtouchdirtyrate=100 # MB/s
#prefix=s${speed}_r${ram}_d${memtouchdirtyrate}_n${expno}

loghome=log

# for cpu utilization
PREV_TOTAL=0
PREV_IDLE=0

################################################################
#
#                       functions  
#
################################################################

function cpusage() {
  CPU=(`grep '^cpu ' /proc/stat`) # Get the total CPU statistics.
  unset CPU[0]                          # Discard the "cpu" prefix.
  IDLE=${CPU[4]}                        # Get the idle CPU time.
  # Calculate the total CPU time.
  TOTAL=0
  for VALUE in "${CPU[@]}"; do
    let "TOTAL=$TOTAL+$VALUE"
  done

  # Calculate the CPU usage since we last checked.
  let "DIFF_IDLE=$IDLE-$PREV_IDLE"
  let "DIFF_TOTAL=$TOTAL-$PREV_TOTAL"
  let "DIFF_USAGE=(1000*($DIFF_TOTAL-$DIFF_IDLE)/$DIFF_TOTAL+5)/10"
  #echo -e "$DIFF_USAGE"
  echo -e "CPU: $DIFF_USAGE %"
  #echo -e "\rCPU: $DIFF_USAGE %  \b\b"

  # Remember the total and idle CPU times for the next check.
  PREV_TOTAL="$TOTAL"
  PREV_IDLE="$IDLE"
}

#######################################################################################

function ncmigrate() {

maxtotaltime=150000 # in milliseconds
#maxtotaltime=30000 # in milliseconds

echo $caps
xbzrle=off
converge=off
if [[ "$caps" == *xbzrle* ]]; then
	xbzrle=on
fi

if [[ "$caps" == *converge* ]]; then
	converge=on
fi

#dirtyratelog=${prefix}.dirty
#echo -n > $dirtyratelog

# CAUTION: DO NOT indent by all means. Doing so will give syntax errors.
nc localhost 4446 << EOF
info version
migrate_set_speed $speed
migrate_set_downtime $downtime
migrate_set_capability auto-converge $converge
migrate_set_capability xbzrle $xbzrle
migrate_set_cache_size $cache
info migrate_capabilities
migrate tcp:c11node10:4444
info migrate
quit
EOF

#while [ 1 ]; do
#	sleep 1

#	echo "info migrate" | nc localhost 4446 > /tmp/infomigrate
#	elapsedtime=$(grep "total time" -a /tmp/infomigrate | awk '{print $3}')
#	dirtyrate=$(grep "dirty" -a /tmp/infomigrate | awk '{print $4}')
#	migstatus=$(grep "status" -a /tmp/infomigrate | awk '{print $3}')

#	echo -n "$elapsedtime "

#	if [[ "$migstatus" == *completed* ]]; then
#		echo "info migrate"; echo quit | nc localhost 4446 
#		break	
#	elif [[ $elapsedtime -gt $maxtotaltime ]]; then
#		echo migrate_cancel; echo quit | nc localhost 4446 
#		break	
#	fi

#	if [ -z "$dirtyrate" ]; then 
#		dirtyrate=0
#	fi
#	echo dirty pages rate: $dirtyrate pages
#done

#	echo quit | nc localhost 4446 

#migrate tcp:c11node10:4444
#info migrate
#info status
#quit
#EOF

echo
}

#######################################################################################

function migrate() {

	prefix=$expno
	if [ $bench == "memtouch" ]; then
		prefix=dirty${memtouchdirtyrate}_${expno}
	fi

	logdir=$loghome/${bench}/${mode}/downtime${downtime}/ram${ram}/vcpu${vcpu}/speed${speed}/${caps}
	#logdir=$loghome/${bench}/${mode}/${cap}/ram${ram}/vcpu${vcpu}/speed${speed}/dirty${memtouchdirtyrate}

	#if [[ $downtime != "0.03" ]]; then
	#	logdir=$logdir/downtime${downtime}
	#fi

	#if [[ $caps == "xbzrle" ]]; then
	if [[ $cache != "64" ]]; then
		logdir=$logdir/cache${cache}
	fi

	logfile=$logdir/${prefix}.log
	dstatfile=$logdir/${prefix}.dstat
	vmdstat=$logdir/${prefix}.vm.dstat
	destdstat=$logdir/${prefix}.dest.dstat
	migfile=$logdir/${prefix}.mig # nc migration results

	mkdir -p $logdir 

	echo ram = $ram MB
	echo migration speed = $speed MB/s
	echo benchmark = $bench
	#echo dirty rate = $memtouchdirtyrate MB/s
	#echo $caps
	echo

	echo $logfile
	echo

	dest=c11node10
	telnetport=4446
	vmargs="$ram $vcpu"

	echo "$dest (${ram}MB) listening ..."
	ssh $dest /root/qemu/listen-daemon $vmargs
	#ssh $dest /root/qemu/listen-postcopy-daemon $ram

	./runvm-daemon $vmargs

	if [ $bench == "idle" ]; then
		bootup=0
	fi
	if [ $bench == "apachebench" ]; then
		bootup=30
	fi

	echo waiting $bootup seconds for VM bootup ...
	sleep $bootup

	echo starting dstat ...
	dstat -cmdngy -N eth1 --noheaders > $dstatfile &
	ssh $vm "dstat -cmdngy --noheaders > dstat/${prefix}" &
	#ssh localhost -p 5555 "dstat -cmdngy --noheaders > dstat/${prefix}.log" &

	# run benchmark (memtouch, sysbench, apache, netperf, lmbench, kc) in background
	bencharg=
	if [ $bench == "memtouch" -a $memtouchdirtyrate -ne 0 ]; then
		bencharg=$memtouchdirtyrate
		#ssh localhost -p 5555 "/root/run-memtouch $memtouchdirtyrate" &
	fi

	sshcmd="/root/run-${bench} $bencharg"
	ablog=$logdir/${prefix}.ab

	if [ $bench != "idle" ]; then
		echo starting $bench $bencharg ...
		#echo starting memtouch $memtouchdirtyrate ...
		if [ $bench == "apachebench" ]; then
			ssh $vm "echo -n > /var/log/apache2/access.log" 
			ssh $client /root/apachebench > $ablog &
			#ssh $client "/root/apachebench > ${prefix}.ab" &
		else
			#ssh localhost -p 5555 "$sshcmd" &
			ssh $vm "$sshcmd" &

			#echo starting sysbench ...
			#ssh localhost -p 5555 "/root/run > sysbench/${prefix}.log" &
		fi

		echo waiting $warmup seconds for initializing ...
		sleep $warmup
	fi
	echo

	echo starting migration ...

	cpusage
	#vcpusage

	#./ncmigrate-postcopy > log/mt_${prefix}.log
	#if [ $bench == "apachebench" ]; then
	#	echo > $migfile
	#	sleep 5
	#fi

	ncmigrate > $migfile
	#logsave $migfile ncmigrate

	cpusage >> $migfile
	#vcpusage >> $migfile

	egrep -a "total time:|downtime:|transferred|bytes|pages|mbps|cache size|cache miss|overflow|CPU" $migfile > $logfile
	cat $logfile

	echo waiting 20 seconds for finalizing ...
	sleep 20

	if [ $bench == "apachebench" ]; then
		#accesslog=/home/apachebench/${prefix}.log
		accesslog=$logdir/${prefix}.access
		scp "$vm:/var/log/apache2/access.log" $accesslog
		scp "$vm:/root/dstat/$prefix" $vmdstat
		#echo -n vcpu >> $logfile
		# ssh $vm /root/cpusage >> $logfile

		# stop benchmark by sending SIGINT
		#ps -ef | grep $client | head -1 | awk '{print \$2}' | xargs kill -2 
		ssh $client "ps -ef | grep image.jpg | grep ab | head -1 | awk '{print \$2}' | xargs kill -2" 

		# shutdown VM at src
		./stopvm localhost $telnetport

	#	cat $logfile
	fi

	# shutdown VM at dest
	./stopvm $dest $telnetport

	# stop dstat
	pgrep -fl dstat| awk '{print $1}' | xargs kill -9
	
	# kill ssh
	kill -9 `ps -ef | grep $vm | awk '{print \$2}'`

	if [ $bench == "apachebench" ]; then
		# plot access.log
		plotaccess="./apachebench/plotaccess"
		$plotaccess $accesslog
	fi

	# plot host cpu/net usage
	plotcpu="./apachebench/plotcpu"
	plotnet="./apachebench/plotnet"
	$plotcpu $dstatfile
	$plotnet $dstatfile

	# plot vm cpu/net usage
	if [ $bench == "apachebench" ]; then
		$plotcpu $vmdstat
		$plotnet $vmdstat
	fi
}

################################################################
#
#                       iterations  
#
################################################################

#expcaps=( default xbzrle auto-converge xbzrle+auto-converge )
#expcaps=( xbzrle auto-converge xbzrle+auto-converge )
#expcaps=( default xbzrle )
#expcaps=( default )
expcaps=( xbzrle )
#expcaps=( auto-converge )
#expcaps=( xbzrle+auto-converge )
#expcaps=( auto-converge xbzrle+auto-converge )

#vcpus=( 1 2 4 6 8 10 12 )
#vcpus=( 12 10 8 6 4 2 1 )
#vcpus=( 8 10 12 )
vcpus=( 12 )

#runs=( 1 2 3 4 5 6 7 8 9 10 )
#runs=( 11 12 13 14 15 16 17 18 19 20 )
#runs=( 10 9 5 )
runs=( 5 )

# xbzrle cache size in MBytes: default 64MB, max unlimited
# should be a power of 2: 256M/512M/1G/2G/4G/8G/16/32...
#caches=( 128 256 512 1024 2048 4096 8192 16384 )
#caches=( 1024 2048 4096 8192 16384 )
#caches=( 512 1024 2048 8192 16384 )
#caches=( 2048 8192 16384 )
#caches=( 64 )
#caches=( 128 )
#caches=( 512 )
#caches=( 8192 )
#caches=( 4096 )
#caches=( 1024 )
#caches=( 2048 )
#caches=( 1024 2048 4096 )
caches=( 16384 )
#caches=( 1024 2048 16384 )
#caches=( 1024 2048 )

# max downtime in seconds: default 0.03 (30ms)
#downtimes=( 0.1 0.5 1 5 10 )
#downtimes=( 0.03 )
downtimes=( 0.5 )
#downtimes=( 0.1 )
#downtimes=( 0.5 0.2 0.1 )
#downtimes=( 1 )

#rams=( 2G 4G 8G 12G 16G 20G )
#rams=( 2048 4096 8192 12288 16384 20480 )
#rams=( 2048 )
#rams=( 4096 )
#rams=( 8192 )
#rams=( 16384 )
#rams=( 12288 )
#rams=( 20480 )
rams=( 1024 )

# 256 400 600 800 1000 mbps
#speeds=( 100 75 50 32 )
#speeds=( 75 50 32 )
#speeds=( 32 )
#speeds=( 50 )
#speeds=( 75 )
#speeds=( 100 )
speeds=( 125 )

################# benchmark specific params ###################

# memtouch
#memtouchdirtyrates=( 10 20 30 40 50 60 70 80 90 100 110 120 )
#memtouchdirtyrates=( 0 )

# sysbench
# hadoop
# lmbench
# cloudstone

for run in ${runs[@]}
do
	expno=$run
	for mem in ${rams[@]}
	do
		ram=$mem
		for sp in ${speeds[@]}
		do
			speed=$sp
			for arg in ${vcpus[@]}
			do
				vcpu=$arg
			for dt in ${downtimes[@]}
			do
				downtime=$dt
			for expcap in ${expcaps[@]}
			do
		#		if [ $expcap != "default" ]; then
					caps=$expcap
		#		fi

				if [ $bench == "memtouch" ]; then
					for rate in ${memtouchdirtyrates[@]}
					do
						memtouchdirtyrate=$rate
						migrate	
					done
				#elif [ $bench == "kernelcompile" ]; then
				else 
					for arg2 in ${caches[@]}
					do
						cache=$arg2
						echo migrate $expcap $vcpu $cache
						migrate	
					done
				fi
			done
			done
			done
		done
	done
	git add .
	git commit -a -m exp
	git push
done

