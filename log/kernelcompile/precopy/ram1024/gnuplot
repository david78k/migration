#!/bin/bash
# generate and upload image to github
#if [ $# -lt 1 ]; then
#        echo "usage: $0 data [eps]"
#        exit 1
#fi

#data=$1

basedir=.
#prefix=${data%\.*}
#script=$prefix.p
#genscript=genscriptvcpu
#genscript=genscriptramsize

function test() {
	echo $data test
}

################################ gendata ############################
function gendata() {
#output=ramsize
output=vcpu

#rams=( 256 512 1024 2048 4096 )
rams=( 1024 )
caps=( default xbzrle auto-converge xbzrle+auto-converge )
#caps=( xbzrle )
#caps=( default )
#dirtyrates=( 10 20 30 40 50 60 70 80 90 100 110 120 )
dirtyrates=( 0 )
vcpus=( 1 2 4 8 12 )
#speeds=( 50 60 70 80 90 100 110 120 )
speeds=( 125 )
expnos=( 2 ) # exp run

#echo "# ram totaltime downtime" > $output
echo "# vcpu totaltime downtime totaldata throughput duplicate cpusage" > $output

for expno in ${expnos[@]}
do
for mem in ${rams[@]}
do
	ram=$mem
	#echo -n "$ram " >> $output
for sp in ${speeds[@]}
do
	speed=$sp
	for vcpu in ${vcpus[@]}
	do
		echo -n "$vcpu " >> $output
		#for rate in ${dirtyrates[@]}
		for cap in ${caps[@]}
		do
			datadir=vcpu${vcpu}/speed${speed}/$cap
			#datadir=ram${ram}/vcpu${vcpu}/speed${speed}/$cap
			datafile=$datadir/${expno}.log
			#datafile=$datadir/dirty${rate}_${expno}.log
			echo $datadir
			#cat $datafile 
			totaltime=`grep "total time:" $datafile | awk '{print $3}'`
			downtime=`grep "downtime:" $datafile | awk '{print $2}'`
			totaldata=`grep "transferred ram:" $datafile | awk '{print $3}'`
			throughput=`grep "throughput:" $datafile | awk '{print $2}'`
			duplicate=`grep "duplicate:" $datafile | awk '{print $2}'`
			cpusage=`grep "CPU:" $datafile | awk '{print $2}'`
			#echo "$totaltime $downtime $totaldata $throughput $duplicate " >> $output
			echo -n "$totaltime $downtime $totaldata $throughput $duplicate $cpusage " >> $output
		done
		echo >> $output
	done
	echo >> $output
done
done
	echo >> $output
done

	cat $output
}

################################ genscript ############################
function genscript() {
# script file to generate gnuplot script "script.p"
name=$prefix.p
#data=$prefix.dat
figure=$prefix.png

#fontsize=24
#fontsize=20
fontsize=16
#figuresize=1000,500
figuresize=640,355
#terminal="png size 640,355"
terminal="png enhanced size $figuresize font $fontsize"
ratio=0.5

#echo "usage: $0 script-name [eps|emf]"
if [ $# -eq 1 ]; then
	figure=$prefix.eps
	terminal="postscript eps enhanced size $figuresize color font $fontsize"
	#terminal="postscript eps enhanced solid size $figuresize color font $fontsize"
	if [ $1 == "emf" ]; then
		fontsize=12
		figure=$prefix.emf
		terminal="emf enhanced size $figuresize font $fontsize"
		#terminal="emf enhanced solid size $figuresize font $fontsize"
	fi
fi

#metric=totaltime
begincol=2 # starting column for total time
if [ $metric == "totaltime" ]; then
	ylabel="total migration time (millisec)"
elif [ $metric == "downtime" ]; then
	ylabel="downtime (millisec)"
	begincol=3 
elif [ $metric == "totaldata" ]; then
	ylabel="total transferred data (kbytes)"
	begincol=4 
elif [ $metric == "throughput" ]; then
	ylabel="throughput (mbps)"
	begincol=5 
elif [ $metric == "duplicate" ]; then
	ylabel="duplicate pages"
	begincol=6 
elif [ $metric == "cpusage" ]; then
	ylabel="host CPU usage"
	begincol=7 
fi

offset=6
# metric
plot="plot data using (\$0-0.3):$begincol title 'default' smooth freq with boxes lc rgb "black", \
data using (\$0-0.1):$(( begincol+offset )) title 'xbzrle' smooth freq with boxes lc rgb "grey", \
data using (\$0+0.1):$((begincol+offset*2)) title 'auto-converge' smooth freq with boxes lc rgb "white", \
data using (\$0+0.3):$((begincol+offset*3)) title 'xbzrle+auto-converge' smooth freq with boxes fs pattern 1 lc rgb "black", \
data using 0:(0):xticlabel(1) title '' w l
"
echo $ylabel
echo $plot

# total time
#plot data using (\$0-0.3):2 title 'default' smooth freq with boxes lc rgb "black", \
#data using (\$0-0.1):7 title 'xbzrle' smooth freq with boxes lc rgb "grey", \
#data using (\$0+0.1):12 title 'auto-converge' smooth freq with boxes lc rgb "white", \
#data using (\$0+0.3):17 title 'xbzrle+auto-converge' smooth freq with boxes fs pattern 1 lc rgb "black", \
#data using 0:(0):xticlabel(1) title '' w l

cat >$name << GNUPLOT_EOF
data = "$data"
figure = "$figure"

set terminal $terminal
#set terminal $terminal size 640,355
#set terminal postscript eps enhanced solid color
set output figure 
set   autoscale                        # scale axes automatically

unset log                              # remove any log-scaling
unset label                            # remove any previous labels
set xtic auto                          # set xtics automatically
set ytic auto                          # set ytics automatically

set tmargin 1;
#set bmargin at screen 0.15
#set object rectangle from screen 0,0 to screen 1,0.5 \
#    lw 0 fillstyle noborder behind
#set multiplot;
#set size 1,0.7;
#set size ratio 0.5;
#set size ratio $ratio;
#set origin 0.0,0.5;

# first plot
#set title "bandwidth limit 50 MB/s"
set xlabel "VCPU"
set ylabel "$ylable"
#set ylabel "downtime (millisec)"
#set ylabel "total migration time (millisec)"
#set ylabel "total transferred data (kbytes)"
#set ylabel "throughput (mbps)"
#set y2label "cpu usage (%)"
#set y2tic auto
set ytics nomirror
#set y2tics
set tics out
set autoscale y
set autoscale y2;
#set key title "migration speed 40MB/s"
#set key box 
#set key horiz 
set key out horiz
set key left top
#set key center top
#set key left
#set key right
#set key 0.01,100
#set label "Yield Point" at 0.003,260
#set arrow from 0.0028,250 to 0.003,280
#set xr [0.0:0.022]
set yr [0:]
#set yr [0:140]
#set y2r [0:100]
#set format y "%gkm"

set style histogram cluster gap 2
set style fill solid border -1
set boxwidth 0.2 absolute
#set boxwidth 0.3 absolute
#set xtic rotate by -45 scale 0

#set style line 1 lt 2 lw 3
#set style line 1 linetype 2 linecolor rgb "orange" linewidth 1.000 pointtype 8 pointsize default
#plot data using (\$14/1000000) title 'send' smooth freq with linespoints, \\

#plot data using 2:xtic(1) notitle smooth freq with boxes lc rgb "grey"
#data using (\$0+0.3):17 title 'xbzrle+auto-converge' smooth freq with boxes lc rgb "red", \

$plot

# total time
#plot data using (\$0-0.3):2 title 'default' smooth freq with boxes lc rgb "black", \
#data using (\$0-0.1):7 title 'xbzrle' smooth freq with boxes lc rgb "grey", \
#data using (\$0+0.1):12 title 'auto-converge' smooth freq with boxes lc rgb "white", \
#data using (\$0+0.3):17 title 'xbzrle+auto-converge' smooth freq with boxes fs pattern 1 lc rgb "black", \
#data using 0:(0):xticlabel(1) title '' w l

# downtime
#plot data using (\$0-0.3):3 title 'default' smooth freq with boxes lc rgb "black", \
#data using (\$0-0.1):8 title 'xbzrle' smooth freq with boxes lc rgb "grey", \
#data using (\$0+0.1):13 title 'auto-converge' smooth freq with boxes lc rgb "white", \
#data using (\$0+0.3):18 title 'xbzrle+auto-converge' smooth freq with boxes fs pattern 1 lc rgb "black", \
#data using 0:(0):xticlabel(1) title '' w l

# total transferred data in kbytes
#plot data using (\$0-0.3):4 title 'default' smooth freq with boxes lc rgb "black", \
#data using (\$0-0.1):9 title 'xbzrle' smooth freq with boxes lc rgb "grey", \
#data using (\$0+0.1):14 title 'auto-converge' smooth freq with boxes lc rgb "white", \
#data using (\$0+0.3):19 title 'xbzrle+auto-converge' smooth freq with boxes fs pattern 1 lc rgb "black", \
#data using 0:(0):xticlabel(1) title '' w l

# migration throughput in mbps
#plot data using (\$0-0.3):5 title 'default' smooth freq with boxes lc rgb "black", \
#data using (\$0-0.1):10 title 'xbzrle' smooth freq with boxes lc rgb "grey", \
#data using (\$0+0.1):15 title 'auto-converge' smooth freq with boxes lc rgb "white", \
#data using (\$0+0.3):20 title 'xbzrle+auto-converge' smooth freq with boxes fs pattern 1 lc rgb "black", \
#data using 0:(0):xticlabel(1) title '' w l

#plot data using 3:xtic(1) notitle smooth freq with boxes lc rgb "grey"

#plot data using 2:xtic(1) title 'time' smooth freq with boxes fs pattern 1

#plot data using 1:2 title 'time' smooth freq with linespoints

#data using (100 - \$3) axis x1y2 title 'cpu usage' with lines lc rgb "black"

#data using (\$5*5.6) axis x1y2 title 'VM window' with linespoints, \\

#data using 11 title 'free memory' with linespoints, \\
#data using 1:(\$2/1000000) axis x2y2 title 'receive' with lines linetype 11 
# second plot
#unset multiplot;

GNUPLOT_EOF
}

################################ genplot ############################
function genplot() {
	# make png
	# genscript generates a script "prefix.p"
	genscript $data
	gnuplot $script

	# make eps
	genscript $data eps
	gnuplot $script

	# make emf
	genscript $data emf
	gnuplot $script

	# upload to github
	git add .
	git commit -m $script
	git push 
}

############################### call functions ############################
data=vcpu
prefix=${data%\.*}
script=$prefix.p

test
# generates "data" file
gendata
#metrics=( totaltime downtime totaldata throughput duplicate cpusage )
metrics=( cpusage )
for met in ${metrics[@]}
do
	metric=$met
	echo $metric
	cp $data "${data}-$metric"
	genplot
done
