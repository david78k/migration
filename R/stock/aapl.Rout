
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> require(devEMF)
Loading required package: devEMF
> emf('aapl.emf')
> 
> aapl <- read.csv("http://www.google.com/finance/historical?q=NASDAQ:AAPL&authuser=0&output=csv ", sep=",", header=1)
> 
> #print(aapl)
> #print(aapl.google)
> print(aapl[6])
      Volume
1   13118396
2    7442791
3    7999415
4    7487409
5    7126582
6    8471356
7    9205087
8    7113173
9   10028407
10   6384490
11   7916463
12   6592985
13   7152217
14   9269262
15   8503027
16  13226429
17  10793903
18   9875898
19   8321050
20  10337850
21   9965321
22  10875363
23  11222060
24   9329464
25   9747021
26  10955812
27  11018152
28  10096036
29  12318809
30  13376943
31   9186892
32  11704148
33  13467649
34  14374396
35  16560318
36  24251827
37  17920676
38  37607745
39  20602736
40  15483491
41  14425478
42  13602762
43  11750792
44  15489527
45   8210190
46  14067517
47  11962053
48  13551549
49  10902952
50   9986457
51   9240955
52  11347538
53  14765593
54  14043410
55   8398851
56   7974196
57   9058246
58   8067331
59   7286005
60   5984105
61  17903833
62  15586205
63  11462767
64  20209401
65   8210807
66  10092636
67  11886469
68   9367474
69  12847099
70   9938230
71  11446219
72  12298336
73  15985045
74  13493238
75  16105962
76  16876555
77  11361745
78  12980263
79  14335104
80   8192629
81   7990176
82   9358123
83   6935114
84   7462101
85   8748032
86  11354252
87  10086441
88   7043561
89   7302093
90   8123329
91   9975649
92   9379300
93   7977736
94   9481153
95   8736719
96   9817472
97   9846255
98  12648671
99  22707445
100 19658589
101 12064019
102 13741585
103 11204446
104 19073679
105 14218135
106 10376510
107  9056905
108  8967859
109 11431229
110  9353506
111  9562134
112  9950070
113 10775888
114 10389858
115 11153301
116  9245340
117 11526929
118 10327986
119 12638665
120  9291344
121  8144247
122  8472169
123 11319881
124 13012249
125 27218075
126 24975046
127 14447816
128 16316472
129 14263539
130 19591095
131 10672634
132 14430353
133 31932384
134 26542696
135 12167369
136 12840179
137  8441697
138 12322554
139 11860738
140  9728684
141  8559102
142 10869536
143 15149587
144 11754682
145  7954603
146  8682329
147 11995615
148 12810249
149 18232783
150 12939408
151 17510501
152 27013273
153 31497848
154 13015470
155  9557887
156  9142834
157 10673424
158 11961220
159 11387656
160  9813618
161  7366046
162 11534193
163 11050795
164  8872900
165  7152679
166  8202948
167 21144832
168 13192629
169  7428228
170  9599245
171  7822974
172  7109152
173  7733481
174  8649015
175  9987209
176 11659852
177 10050117
178 12596034
179 10654060
180  9788680
181  8604594
182 16788797
183 13970435
184 20665631
185 12050007
186 13140939
187 11226398
188 17169490
189 17185334
190 12767794
191 11108255
192  6970064
193  9265779
194  9381840
195 10218298
196  9479524
197 10203764
198 16084149
199 14455098
200 14895494
201 10378191
202 10454503
203 13298263
204 13725006
205 12632664
206 11813667
207 13790884
208  9872377
209 12620748
210 15830694
211 16296320
212 16127712
213 15288547
214 21552354
215 26486155
216 15968420
217 11325330
218 11958926
219 14241068
220 16878434
221 17276868
222 17737166
223 12911684
224 15072312
225 18112671
226 24697766
227 22868730
228 27295570
229 13744165
230 34636913
231 23722707
232 15354206
233 21759743
234 23796309
235 33751923
236 10920394
237 11339958
238  8525897
239 11736299
240 13425964
241 10955445
242 10752106
243 13703354
244 12809234
245 12971961
246 18920462
247 13918927
248 15820798
249 11836042
250 10510489
251 17897634
> 
> #write.csv(aapl, file = "appl.csv")
> #write.table(aapl, file = "appl.tab")
> 
> #axis = (2, aapl[2])
> plot(aapl[6], header = TRUE, col="blue")
Warning messages:
1: In plot.window(...) : "header" is not a graphical parameter
2: In plot.xy(xy, type, ...) : "header" is not a graphical parameter
3: In axis(side = side, at = at, labels = labels, ...) :
  "header" is not a graphical parameter
4: In title(xlab = xlab, ylab = ylab, ...) :
  "header" is not a graphical parameter
5: In plot.xy(xy.coords(x, y), type = type, ...) :
  "header" is not a graphical parameter
> #plot(aapl[2], aapl[3,6], header = TRUE)
> #plot(aapl[2], aapl[6], header = TRUE)
> #plot(aapl[2], aapl[3,6])
> 
> # simple example
> x <- c(1,3,6,9,12)
> y <- c(1.5,2,7,8,15)
> #plot(x,y, pch=15, col="blue")
> 
> # Example 2. Draw a plot, set a bunch of parameters.
> #plot(x,y, xlab="x axis", ylab="y axis", main="my plot", ylim=c(0,20), xlim=c(0,20), pch=15, col="blue")
> # fit a line to the points
> #myline.fit <- lm(y ~ x)
> 
> # get information about the fit
> #summary(myline.fit)
> 
> # draw the fit line on the plot
> #abline(myline.fit)
> 
> # add some more points to the graph
> #x2 <- c(0.5, 3, 5, 8, 12)
> #y2 <- c(0.8, 1, 2, 4, 6)
> 
> #points(x2, y2, pch=16, col="green")
> 
> # header = TRUE ignores the first line, check.names = FALSE allows '+' in 'C++'
> #benchmark <- read.table("", header = TRUE, row.names = "vwnd", check.names = FALSE)
> 
> # 't()' is matrix tranposition, 'beside = TRUE' separates the benchmarks, 'heat' provides nice colors
> #barplot(t(as.matrix(benchmark)), beside = TRUE, col = heat.colors(6))
> #barplot(t(as.matrix(benchmark)), beside = TRUE, col = heat.colors(6), xlab = "TIME (DAY)", ylab = "STOCK PRICE")
> 
> # 'cex' stands for 'character expansion', 'bty' for 'box type' (we don't want borders)
> #legend("topright", names(benchmark), cex = 0.9, bty = "n", fill = heat.colors(6))
> 
> 
> proc.time()
   user  system elapsed 
  0.702   0.036   0.836 
